// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeacherEntities.Entities;

#nullable disable

namespace TeacherService.Migrations
{
    [DbContext(typeof(TeacherDbContext))]
    [Migration("20220424111305_InitialTeacherMigration")]
    partial class InitialTeacherMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TeacherClassTeacherAssignment", b =>
                {
                    b.Property<int>("TeacherAssignmentsId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherClassesId")
                        .HasColumnType("int");

                    b.HasKey("TeacherAssignmentsId", "TeacherClassesId");

                    b.HasIndex("TeacherClassesId");

                    b.ToTable("TeacherClassTeacherAssignment");
                });

            modelBuilder.Entity("TeacherClassTeacherQuiz", b =>
                {
                    b.Property<int>("TeacherClassesId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherQuizsId")
                        .HasColumnType("int");

                    b.HasKey("TeacherClassesId", "TeacherQuizsId");

                    b.HasIndex("TeacherQuizsId");

                    b.ToTable("TeacherClassTeacherQuiz");
                });

            modelBuilder.Entity("TeacherEntites.Entities.TeacherClasses.ClassEnrollee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassEnrollees");
                });

            modelBuilder.Entity("TeacherEntities.Entities.TeacherActivity.TeacherAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeacherAssignments");
                });

            modelBuilder.Entity("TeacherEntities.Entities.TeacherActivity.TeacherQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClipId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeacherQuizzes");
                });

            modelBuilder.Entity("TeacherEntities.Entities.TeacherClasses.TeacherClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TeacherClasses");
                });

            modelBuilder.Entity("TeacherEntities.Entities.TeacherSubjects.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("TeacherEntities.Entities.Trackers.TeacherAssignmentActivityTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityStatus")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReplyAttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplyComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeacherAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherAssignmentId");

                    b.ToTable("TeacherAssignmentActivityTrackers");
                });

            modelBuilder.Entity("TeacherEntities.Entities.Trackers.TeacherQuizActivityTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityStatus")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeacherQuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherQuizId");

                    b.ToTable("TeacherQuizActivityTrackers");
                });

            modelBuilder.Entity("TeacherClassTeacherAssignment", b =>
                {
                    b.HasOne("TeacherEntities.Entities.TeacherActivity.TeacherAssignment", null)
                        .WithMany()
                        .HasForeignKey("TeacherAssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeacherEntities.Entities.TeacherClasses.TeacherClass", null)
                        .WithMany()
                        .HasForeignKey("TeacherClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherClassTeacherQuiz", b =>
                {
                    b.HasOne("TeacherEntities.Entities.TeacherClasses.TeacherClass", null)
                        .WithMany()
                        .HasForeignKey("TeacherClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeacherEntities.Entities.TeacherActivity.TeacherQuiz", null)
                        .WithMany()
                        .HasForeignKey("TeacherQuizsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherEntites.Entities.TeacherClasses.ClassEnrollee", b =>
                {
                    b.HasOne("TeacherEntities.Entities.TeacherClasses.TeacherClass", "TeacherClassFK")
                        .WithMany("ClassEnrollees")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherClassFK");
                });

            modelBuilder.Entity("TeacherEntities.Entities.Trackers.TeacherAssignmentActivityTracker", b =>
                {
                    b.HasOne("TeacherEntities.Entities.TeacherActivity.TeacherAssignment", "TeacherAssignmentFK")
                        .WithMany()
                        .HasForeignKey("TeacherAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherAssignmentFK");
                });

            modelBuilder.Entity("TeacherEntities.Entities.Trackers.TeacherQuizActivityTracker", b =>
                {
                    b.HasOne("TeacherEntities.Entities.TeacherActivity.TeacherQuiz", "TeacherQuizFK")
                        .WithMany()
                        .HasForeignKey("TeacherQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherQuizFK");
                });

            modelBuilder.Entity("TeacherEntities.Entities.TeacherClasses.TeacherClass", b =>
                {
                    b.Navigation("ClassEnrollees");
                });
#pragma warning restore 612, 618
        }
    }
}
