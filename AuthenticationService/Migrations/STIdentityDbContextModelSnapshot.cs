// <auto-generated />
using System;
using IdentityEntities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityService.Migrations
{
    [DbContext(typeof(STIdentityDbContext))]
    partial class STIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IdentityEntities.Entities.Grades.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnabled = false,
                            Name = "KG1"
                        },
                        new
                        {
                            Id = 2,
                            IsEnabled = false,
                            Name = "KG2"
                        },
                        new
                        {
                            Id = 3,
                            IsEnabled = true,
                            Name = "الصف الأول الإبتدائى"
                        },
                        new
                        {
                            Id = 4,
                            IsEnabled = true,
                            Name = "الصف الثانى الإبتدائى"
                        },
                        new
                        {
                            Id = 5,
                            IsEnabled = true,
                            Name = "الصف الثالث الإبتدائى"
                        },
                        new
                        {
                            Id = 6,
                            IsEnabled = true,
                            Name = "الصف الرابع الإبتدائى"
                        },
                        new
                        {
                            Id = 7,
                            IsEnabled = true,
                            Name = "الصف الخامس الإبتدائى"
                        },
                        new
                        {
                            Id = 8,
                            IsEnabled = true,
                            Name = "الصف السادس الإبتدائى"
                        },
                        new
                        {
                            Id = 9,
                            IsEnabled = false,
                            Name = "الصف الأول الإعدادى"
                        },
                        new
                        {
                            Id = 10,
                            IsEnabled = false,
                            Name = "الصف الثانى الإعدادى"
                        },
                        new
                        {
                            Id = 11,
                            IsEnabled = false,
                            Name = "الصف الثالث الإعدادى"
                        },
                        new
                        {
                            Id = 12,
                            IsEnabled = false,
                            Name = "الصف الأول الثانوى"
                        },
                        new
                        {
                            Id = 13,
                            IsEnabled = false,
                            Name = "الصف الثانى الثانوى"
                        },
                        new
                        {
                            Id = 14,
                            IsEnabled = false,
                            Name = "الثانوية العامة"
                        });
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.ExternalIdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifierkey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("ExternalIdentityProviders");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityActivation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivationType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("IdentityActivations");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityReferralTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityReferralUserId")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityReferralUserId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("IdentityReferralTrackers");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityRefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Token");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("IdentityRefreshTokens");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrimaryId")
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryId")
                        .HasColumnType("NVARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryId");

                    b.HasIndex("SecondaryId");

                    b.ToTable("IdentityRelations");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Teacher"
                        });
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentitySchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentitySchools");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityTemporaryValueHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("IdentityTemporaryValueHolders");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int");

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("HopeToBe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("IdentitySchoolId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsEmailSubscribed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMobileVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("GradeId");

                    b.HasIndex("IdentityRoleId");

                    b.HasIndex("IdentitySchoolId");

                    b.ToTable("IdentityUsers");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Locations.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnabled = true,
                            Name = "القاهرة"
                        },
                        new
                        {
                            Id = 2,
                            IsEnabled = true,
                            Name = "الجيزة"
                        },
                        new
                        {
                            Id = 3,
                            IsEnabled = false,
                            Name = "حلوان"
                        },
                        new
                        {
                            Id = 4,
                            IsEnabled = true,
                            Name = "الدقهلية"
                        },
                        new
                        {
                            Id = 5,
                            IsEnabled = true,
                            Name = "المنوفية"
                        },
                        new
                        {
                            Id = 6,
                            IsEnabled = true,
                            Name = "الاسكندرية"
                        },
                        new
                        {
                            Id = 7,
                            IsEnabled = true,
                            Name = "الشرقية"
                        },
                        new
                        {
                            Id = 8,
                            IsEnabled = true,
                            Name = "الغربية"
                        },
                        new
                        {
                            Id = 9,
                            IsEnabled = true,
                            Name = "القليوبية"
                        },
                        new
                        {
                            Id = 10,
                            IsEnabled = true,
                            Name = "بورسعيد"
                        },
                        new
                        {
                            Id = 11,
                            IsEnabled = true,
                            Name = "اسوان"
                        },
                        new
                        {
                            Id = 12,
                            IsEnabled = false,
                            Name = "6 أكتوبر"
                        },
                        new
                        {
                            Id = 13,
                            IsEnabled = true,
                            Name = "اسيوط"
                        },
                        new
                        {
                            Id = 14,
                            IsEnabled = true,
                            Name = "كفر الشيخ"
                        },
                        new
                        {
                            Id = 15,
                            IsEnabled = true,
                            Name = "السويس"
                        },
                        new
                        {
                            Id = 16,
                            IsEnabled = true,
                            Name = "بنى سويف"
                        },
                        new
                        {
                            Id = 17,
                            IsEnabled = true,
                            Name = "الفيوم"
                        },
                        new
                        {
                            Id = 18,
                            IsEnabled = true,
                            Name = "البحيرة"
                        },
                        new
                        {
                            Id = 19,
                            IsEnabled = true,
                            Name = "المنيا"
                        },
                        new
                        {
                            Id = 20,
                            IsEnabled = true,
                            Name = "سوهاج"
                        },
                        new
                        {
                            Id = 21,
                            IsEnabled = true,
                            Name = "الاسماعيلية"
                        },
                        new
                        {
                            Id = 22,
                            IsEnabled = true,
                            Name = "شمال سيناء"
                        },
                        new
                        {
                            Id = 23,
                            IsEnabled = true,
                            Name = "دمياط"
                        },
                        new
                        {
                            Id = 24,
                            IsEnabled = true,
                            Name = "الاقصر"
                        },
                        new
                        {
                            Id = 25,
                            IsEnabled = true,
                            Name = "جنوب سيناء"
                        },
                        new
                        {
                            Id = 26,
                            IsEnabled = true,
                            Name = "البحر الاحمر"
                        },
                        new
                        {
                            Id = 27,
                            IsEnabled = true,
                            Name = "قنا"
                        },
                        new
                        {
                            Id = 28,
                            IsEnabled = true,
                            Name = "الوادى الجديد"
                        },
                        new
                        {
                            Id = 29,
                            IsEnabled = true,
                            Name = "مرسى مطروح"
                        });
                });

            modelBuilder.Entity("IdentityEntities.Shared.Identities.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AvatarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Avatars");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            AvatarType = "Default",
                            ImageUrl = "default.png"
                        },
                        new
                        {
                            Id = 1,
                            AvatarType = "Student",
                            ImageUrl = "01.png"
                        },
                        new
                        {
                            Id = 2,
                            AvatarType = "Student",
                            ImageUrl = "02.png"
                        },
                        new
                        {
                            Id = 3,
                            AvatarType = "Student",
                            ImageUrl = "03.png"
                        },
                        new
                        {
                            Id = 5,
                            AvatarType = "Student",
                            ImageUrl = "04.png"
                        },
                        new
                        {
                            Id = 6,
                            AvatarType = "Student",
                            ImageUrl = "05.png"
                        },
                        new
                        {
                            Id = 7,
                            AvatarType = "Student",
                            ImageUrl = "06.png"
                        },
                        new
                        {
                            Id = 8,
                            AvatarType = "Student",
                            ImageUrl = "07.png"
                        },
                        new
                        {
                            Id = 9,
                            AvatarType = "Student",
                            ImageUrl = "08.png"
                        },
                        new
                        {
                            Id = 10,
                            AvatarType = "Parent",
                            ImageUrl = "01.png"
                        },
                        new
                        {
                            Id = 11,
                            AvatarType = "Parent",
                            ImageUrl = "02.png"
                        },
                        new
                        {
                            Id = 12,
                            AvatarType = "Parent",
                            ImageUrl = "03.png"
                        },
                        new
                        {
                            Id = 13,
                            AvatarType = "Parent",
                            ImageUrl = "04.png"
                        },
                        new
                        {
                            Id = 14,
                            AvatarType = "Parent",
                            ImageUrl = "05.png"
                        },
                        new
                        {
                            Id = 15,
                            AvatarType = "Parent",
                            ImageUrl = "06.png"
                        },
                        new
                        {
                            Id = 16,
                            AvatarType = "Parent",
                            ImageUrl = "07.png"
                        },
                        new
                        {
                            Id = 17,
                            AvatarType = "Parent",
                            ImageUrl = "08.png"
                        },
                        new
                        {
                            Id = 18,
                            AvatarType = "Teacher",
                            ImageUrl = "01.png"
                        },
                        new
                        {
                            Id = 19,
                            AvatarType = "Teacher",
                            ImageUrl = "02.png"
                        },
                        new
                        {
                            Id = 20,
                            AvatarType = "Teacher",
                            ImageUrl = "03.png"
                        },
                        new
                        {
                            Id = 21,
                            AvatarType = "Teacher",
                            ImageUrl = "04.png"
                        },
                        new
                        {
                            Id = 22,
                            AvatarType = "Teacher",
                            ImageUrl = "05.png"
                        },
                        new
                        {
                            Id = 23,
                            AvatarType = "Teacher",
                            ImageUrl = "06.png"
                        },
                        new
                        {
                            Id = 24,
                            AvatarType = "Teacher",
                            ImageUrl = "07.png"
                        },
                        new
                        {
                            Id = 25,
                            AvatarType = "Teacher",
                            ImageUrl = "08.png"
                        },
                        new
                        {
                            Id = 26,
                            AvatarType = "Student",
                            ImageUrl = "09.png"
                        },
                        new
                        {
                            Id = 27,
                            AvatarType = "Student",
                            ImageUrl = "10.png"
                        },
                        new
                        {
                            Id = 28,
                            AvatarType = "Student",
                            ImageUrl = "11.png"
                        },
                        new
                        {
                            Id = 29,
                            AvatarType = "Student",
                            ImageUrl = "12.png"
                        },
                        new
                        {
                            Id = 30,
                            AvatarType = "Student",
                            ImageUrl = "13.png"
                        },
                        new
                        {
                            Id = 31,
                            AvatarType = "Student",
                            ImageUrl = "14.png"
                        },
                        new
                        {
                            Id = 32,
                            AvatarType = "Student",
                            ImageUrl = "15.png"
                        },
                        new
                        {
                            Id = 33,
                            AvatarType = "Student",
                            ImageUrl = "16.png"
                        },
                        new
                        {
                            Id = 34,
                            AvatarType = "Teacher",
                            ImageUrl = "09.png"
                        },
                        new
                        {
                            Id = 35,
                            AvatarType = "Teacher",
                            ImageUrl = "10.png"
                        },
                        new
                        {
                            Id = 36,
                            AvatarType = "Teacher",
                            ImageUrl = "11.png"
                        },
                        new
                        {
                            Id = 37,
                            AvatarType = "Teacher",
                            ImageUrl = "12.png"
                        },
                        new
                        {
                            Id = 38,
                            AvatarType = "Teacher",
                            ImageUrl = "13.png"
                        },
                        new
                        {
                            Id = 39,
                            AvatarType = "Teacher",
                            ImageUrl = "14.png"
                        },
                        new
                        {
                            Id = 40,
                            AvatarType = "Teacher",
                            ImageUrl = "15.png"
                        },
                        new
                        {
                            Id = 41,
                            AvatarType = "Teacher",
                            ImageUrl = "16.png"
                        });
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.ExternalIdentityProvider", b =>
                {
                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "IdentityUserFK")
                        .WithMany("ExternalIdentityProviders")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUserFK");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityActivation", b =>
                {
                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "IdentityUserFK")
                        .WithMany("Activations")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUserFK");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityReferralTracker", b =>
                {
                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "IdentityReferralUserFK")
                        .WithMany()
                        .HasForeignKey("IdentityReferralUserId");

                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "IdentityUserFK")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityReferralUserFK");

                    b.Navigation("IdentityUserFK");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityRefreshToken", b =>
                {
                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "IdentityUserFK")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUserFK");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityRelation", b =>
                {
                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "PrimaryFK")
                        .WithMany()
                        .HasForeignKey("PrimaryId");

                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "SecondaryFK")
                        .WithMany()
                        .HasForeignKey("SecondaryId");

                    b.Navigation("PrimaryFK");

                    b.Navigation("SecondaryFK");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityTemporaryValueHolder", b =>
                {
                    b.HasOne("IdentityEntities.Entities.Identities.IdentityUser", "IdentityUserFK")
                        .WithMany("IdentityTemporaryValueHolders")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUserFK");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityUser", b =>
                {
                    b.HasOne("IdentityEntities.Shared.Identities.Avatar", "AvatarFK")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("IdentityEntities.Entities.Locations.Governorate", "GovernorateFK")
                        .WithMany()
                        .HasForeignKey("GovernorateId");

                    b.HasOne("IdentityEntities.Entities.Grades.Grade", "GradeFK")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("IdentityEntities.Entities.Identities.IdentityRole", "IdentityRoleFK")
                        .WithMany()
                        .HasForeignKey("IdentityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityEntities.Entities.Identities.IdentitySchool", "IdentitySchoolFK")
                        .WithMany("IdentityUsers")
                        .HasForeignKey("IdentitySchoolId");

                    b.Navigation("AvatarFK");

                    b.Navigation("GovernorateFK");

                    b.Navigation("GradeFK");

                    b.Navigation("IdentityRoleFK");

                    b.Navigation("IdentitySchoolFK");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentitySchool", b =>
                {
                    b.Navigation("IdentityUsers");
                });

            modelBuilder.Entity("IdentityEntities.Entities.Identities.IdentityUser", b =>
                {
                    b.Navigation("Activations");

                    b.Navigation("ExternalIdentityProviders");

                    b.Navigation("IdentityTemporaryValueHolders");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
