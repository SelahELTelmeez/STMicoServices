// <auto-generated />
using System;
using CurriculumEntites.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurriculumService.Migrations
{
    [DbContext(typeof(CurriculumDbContext))]
    partial class CurriculumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CurriculumEntites.Entities.Clips.Clip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMedu")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<string>("KNLDBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("Orientation")
                        .HasColumnType("int");

                    b.Property<int>("PageNo")
                        .HasColumnType("int");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("Usability")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Clips");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Lessons.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EndUnit")
                        .HasColumnType("int");

                    b.Property<bool?>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ponits")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartUnit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.MCQS.MCQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClipId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInSec")
                        .HasColumnType("int");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClipId");

                    b.HasIndex("Id");

                    b.ToTable("MCQ");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.MCQS.MCQAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("MCQId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MCQId");

                    b.ToTable("MCQAnswer");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.MCQS.MCQQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MCQId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MCQId")
                        .IsUnique();

                    b.ToTable("MCQQuestion");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UnitId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuizFormId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizFormId");

                    b.ToTable("QuizAnswers");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("QuizFormId")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UserAnswerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizFormId");

                    b.HasIndex("UserAnswerId");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClipId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInSec")
                        .HasColumnType("int");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClipId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizForms");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Subjects.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullyQualifiedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAppShow")
                        .HasColumnType("bit");

                    b.Property<int?>("RewardPoints")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectGroupId");

                    b.HasIndex("SubjectLanguageId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Subjects.SubjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "KG1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "KG2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "الصف الأول الإبتدائى"
                        },
                        new
                        {
                            Id = 4,
                            Name = "الصف الثانى الإبتدائى"
                        },
                        new
                        {
                            Id = 5,
                            Name = "الصف الثالث الإبتدائى"
                        },
                        new
                        {
                            Id = 6,
                            Name = "الصف الرابع الإبتدائى"
                        },
                        new
                        {
                            Id = 7,
                            Name = "الصف الخامس الإبتدائى"
                        },
                        new
                        {
                            Id = 8,
                            Name = "الصف السادس الإبتدائى"
                        },
                        new
                        {
                            Id = 9,
                            Name = "الصف الأول الإعدادى"
                        },
                        new
                        {
                            Id = 10,
                            Name = "الصف الثانى الإعدادى"
                        },
                        new
                        {
                            Id = 11,
                            Name = "الصف الثالث الإعدادى"
                        },
                        new
                        {
                            Id = 12,
                            Name = "الصف الأول الثانوى"
                        },
                        new
                        {
                            Id = 13,
                            Name = "الصف الثانى الثانوى"
                        },
                        new
                        {
                            Id = 14,
                            Name = "الثانوية العامة"
                        });
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Subjects.SubjectLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectLanguage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "عربى"
                        },
                        new
                        {
                            Id = 2,
                            Name = "لغات"
                        },
                        new
                        {
                            Id = 3,
                            Name = "الكل"
                        });
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Units.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullyQualifiedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsShow")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UnitNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Clips.Clip", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Lessons.Lesson", "LessonFK")
                        .WithMany("Clips")
                        .HasForeignKey("Id");

                    b.Navigation("LessonFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Lessons.Lesson", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Units.Unit", "UnitFK")
                        .WithMany("Lessons")
                        .HasForeignKey("UnitId");

                    b.Navigation("UnitFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.MCQS.MCQ", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Clips.Clip", "ClipFK")
                        .WithMany()
                        .HasForeignKey("ClipId");

                    b.HasOne("CurriculumEntites.Entities.Lessons.Lesson", "LessonFK")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("ClipFK");

                    b.Navigation("LessonFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.MCQS.MCQAnswer", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.MCQS.MCQ", "MCQFK")
                        .WithMany("Answers")
                        .HasForeignKey("MCQId");

                    b.Navigation("MCQFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.MCQS.MCQQuestion", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.MCQS.MCQ", "MCQFK")
                        .WithOne("Question")
                        .HasForeignKey("CurriculumEntites.Entities.MCQS.MCQQuestion", "MCQId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MCQFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.Quiz", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Lessons.Lesson", "LessonFK")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("CurriculumEntites.Entities.Subjects.Subject", "SubjectFK")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("CurriculumEntites.Entities.Units.Unit", "UnitFK")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("LessonFK");

                    b.Navigation("SubjectFK");

                    b.Navigation("UnitFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizAnswer", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Quizzes.QuizForm", "QuizFormFK")
                        .WithMany("Answers")
                        .HasForeignKey("QuizFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizFormFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizAttempt", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Quizzes.QuizForm", "QuizForm")
                        .WithMany()
                        .HasForeignKey("QuizFormId");

                    b.HasOne("CurriculumEntites.Entities.Quizzes.QuizAnswer", "UserAnswer")
                        .WithMany()
                        .HasForeignKey("UserAnswerId");

                    b.Navigation("QuizForm");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizForm", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Clips.Clip", "ClipFK")
                        .WithMany()
                        .HasForeignKey("ClipId");

                    b.HasOne("CurriculumEntites.Entities.Quizzes.QuizQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurriculumEntites.Entities.Quizzes.Quiz", "QuizFK")
                        .WithMany("QuizForms")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClipFK");

                    b.Navigation("Question");

                    b.Navigation("QuizFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Subjects.Subject", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Subjects.SubjectGroup", "SubjectGroupFK")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectGroupId");

                    b.HasOne("CurriculumEntites.Entities.Subjects.SubjectLanguage", "SubjectLanguageFK")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectLanguageId");

                    b.Navigation("SubjectGroupFK");

                    b.Navigation("SubjectLanguageFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Units.Unit", b =>
                {
                    b.HasOne("CurriculumEntites.Entities.Subjects.Subject", "SubjectFK")
                        .WithMany("Units")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectFK");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Lessons.Lesson", b =>
                {
                    b.Navigation("Clips");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.MCQS.MCQ", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Question")
                        .IsRequired();
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.Quiz", b =>
                {
                    b.Navigation("QuizForms");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Quizzes.QuizForm", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Subjects.Subject", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Subjects.SubjectGroup", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Subjects.SubjectLanguage", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("CurriculumEntites.Entities.Units.Unit", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
